package com.epay.transaction.validator;

import com.epay.transaction.model.request.TransactionUpdateRequest;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import java.util.ArrayList;

import static com.epay.transaction.util.TransactionConstant.*;
import static com.epay.transaction.util.TransactionErrorConstants.ATRN;
import static com.epay.transaction.util.TransactionErrorConstants.REASON;

/**
 * Class Name: PaymentValidator
 *
 * Description: Validates payment-related fields in a transaction update request.
 *
 * Author: Shubhangi Kurelay
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved
 *
 * Version: 1.0
 */

@Component
@RequiredArgsConstructor
public class PaymentValidator extends BaseValidator {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Validates the transaction update request for order update.
     *
     * @param transactionUpdateRequest the request object containing transaction update data
     */
    public void validateOrderRequest(TransactionUpdateRequest transactionUpdateRequest) {
        logger.info("PaymentValidator | validateOrderRequest | Start");
        errorDtoList = new ArrayList<>();
        validateMandatoryFields(transactionUpdateRequest);
        validateLeadingTrailingSpacesAndSingleSpace(transactionUpdateRequest);
        validateFieldsValue(transactionUpdateRequest);
        validateSpacialCharacter(transactionUpdateRequest);
        throwIfErrors();
        logger.info("PaymentValidator | validateOrderRequest | End");
    }

    /**
     * Validates special characters in the fields using regex.
     *
     * @param transactionUpdateRequest the request object containing transaction update data
     */
    protected void validateSpacialCharacter(TransactionUpdateRequest transactionUpdateRequest) {
        logger.info("PaymentValidator | validateSpacialCharacter | Start");
        validateFieldWithRegex(transactionUpdateRequest.getAtrn(), ATRN_ARRN_REGEX, ATRN, "Invalid Atrn format");
        validateFieldWithRegex(transactionUpdateRequest.getFailReason(), SPECIAL_CHARACTER_REGEX, REASON, "Invalid failreason format");
        throwIfErrors();
        logger.info("PaymentValidator | validateSpacialCharacter | End");
    }

    /**
     * Validates that mandatory fields are not null or empty.
     *
     * @param transactionUpdateRequest the request object containing transaction update data
     */
    private void validateMandatoryFields(TransactionUpdateRequest transactionUpdateRequest) {
        logger.info("PaymentValidator | validateMandatoryFields | Start");
        checkMandatoryField(transactionUpdateRequest.getAtrn(), ATRN);
        checkMandatoryField(transactionUpdateRequest.getFailReason(), REASON);
        throwIfErrors();
        logger.info("PaymentValidator | validateMandatoryFields | End");
    }

    /**
     * Validates that there are no leading/trailing spaces and only single spaces between words.
     *
     * @param transactionUpdateRequest the request object containing transaction update data
     */
    private void validateLeadingTrailingSpacesAndSingleSpace(TransactionUpdateRequest transactionUpdateRequest) {
        logger.info("PaymentValidator | validateLeadingTrailingSpacesAndSingleSpace | Start");
        checkForLeadingTrailingAndSingleSpace(transactionUpdateRequest.getAtrn(), ATRN);
        checkForLeadingTrailingAndSingleSpace(transactionUpdateRequest.getFailReason(), REASON);
        throwIfErrors();
        logger.info("PaymentValidator | validateLeadingTrailingSpacesAndSingleSpace | End");
    }

    /**
     * Validates the field lengths based on allowed constraints.
     *
     * @param transactionUpdateRequest the request object containing transaction update data
     */
    private void validateFieldsValue(TransactionUpdateRequest transactionUpdateRequest) {
        logger.info("PaymentValidator | validateFieldsValue | Start");
        validateFieldLength(transactionUpdateRequest.getAtrn(), ATRN_ARRN_LENGTH, ATRN);
        validateFieldLengths(transactionUpdateRequest.getFailReason(), REASON_LENGTH, REASON);
        throwIfErrors();
        logger.info("PaymentValidator | validateFieldsValue | End");
    }

}
