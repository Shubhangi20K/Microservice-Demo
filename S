@Repository
@RequiredArgsConstructor
public class ErrorLogDao {
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final ErrorLogRepository errorLogRepository;
    private final ErrorMapper errorMapper;

    public void logCustomerError(ErrorLogRequest request) {
        request.setFailureReason(FailureReason.CUSTOMER);
        saveErrorLog(request);
    }

    public void logTechnicalError(ErrorLogRequest request) {
        request.setFailureReason(FailureReason.TECHNICAL);
        saveErrorLog(request);
    }

    public void logBusinessError(ErrorLogRequest request) {
        request.setFailureReason(FailureReason.BUSINESS);
        saveErrorLog(request);
    }

    private void saveErrorLog(ErrorLogRequest request) {
        ErrorLogDto errorLogDto = ErrorLogDto.builder()
                .mId(request.getMId())
                .entityType(request.getEntityType())
                .failureReason(request.getFailureReason())
                .errorCode(request.getErrorCode())
                .errorMessage(request.getErrorMessage())
                .atrn(request.getAtrn())
                .payMode(request.getPayMode())
                .orderRefNumber(request.getOrderRefNumber())
                .sbiOrderRefNumber(request.getSbiOrderRefNumber())
                .build();

        logger.info("Saving Error Log: {}", errorLogDto);
        errorLogRepository.save(errorMapper.dtoToEntity(errorLogDto));
        logger.info("Error Log Saved Successfully.");
    }
}
