

package com.sbi.epay.encryptdecrypt.service;

import com.sbi.epay.encryptdecrypt.exception.EncryptionDecryptionException;
import com.sbi.epay.encryptdecrypt.util.enums.KeyGenerationAlgo;
import com.sbi.epay.encryptdecrypt.util.enums.SecretKeyLength;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import javax.crypto.SecretKey;
import java.util.Base64;
import static org.junit.jupiter.api.Assertions.*;

class KeyGeneratorServiceTest {

    @Test
    void testGenerateKeyByDefaultAlgo_Success() throws EncryptionDecryptionException {
        // Act
        String key = KeyGeneratorService.generateKeyByDefaultAlgo(SecretKeyLength.BITS_256);

        // Assert
        assertNotNull(key, "Generated key should not be null");
        assertFalse(key.isEmpty(), "Generated key should not be empty");
    }

    @Test
    void testGenerateKeyByAlgo_Success() throws EncryptionDecryptionException {
        // Act
        String key = KeyGeneratorService.generateKeyByAlgo(SecretKeyLength.BITS_128, KeyGenerationAlgo.AES);

        // Assert
        assertNotNull(key, "Generated key should not be null");
        assertFalse(key.isEmpty(), "Generated key should not be empty");
    }

    @Test
    void testGetSecretKey_Success() throws EncryptionDecryptionException {
        // Act
        SecretKey secretKey = KeyGeneratorService.getSecretKey(SecretKeyLength.BITS_256, KeyGenerationAlgo.AES);

        // Assert
        assertNotNull(secretKey, "SecretKey should not be null");
        assertEquals("AES", secretKey.getAlgorithm(), "Algorithm should be AES");
        assertTrue(secretKey.getEncoded().length > 0, "SecretKey should have valid encoded bytes");
    }

    @Test
    void testGenerateKeyByAlgo_InvalidAlgorithm() {
        // Act & Assert
        EncryptionDecryptionException exception = assertThrows(EncryptionDecryptionException.class, () -> 
            KeyGeneratorService.generateKeyByAlgo(SecretKeyLength.BITS_128, KeyGenerationAlgo.UNSUPPORTED)
        );

        assertEquals("9999", exception.getErrorCode(), "Error code should match generic error");
        assertEquals("An error occurred while processing the request.", exception.getErrorMessage(), "Error message should be correct");
    }

    @Test
    void testGetSecretKey_InvalidAlgorithm() {
        // Act & Assert
        EncryptionDecryptionException exception = assertThrows(EncryptionDecryptionException.class, () -> 
            KeyGeneratorService.getSecretKey(SecretKeyLength.BITS_256, KeyGenerationAlgo.UNSUPPORTED)
        );

        assertEquals("9999", exception.getErrorCode(), "Error code should match generic error");
        assertEquals("An error occurred while processing the request.", exception.getErrorMessage(), "Error message should be correct");
    }
}
