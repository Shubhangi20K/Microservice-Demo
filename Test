

 */
@Component
@RequiredArgsConstructor
public class MerchantUserDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserRepository merchantUserRepository;
    private final UserMenuPermissionRepository userMenuPermissionRepository;
    private final DefaultUserPermissionRepository defaultUserPermissionRepository;
    private final MenuInfoRepository menuInfoRepository;
    private final MerchantEntityUserRepository merchantEntityUserRepository;
    private final PermissionRepository permissionRepository;
    private final MerchantUserRoleRepository merchantUserRoleRepository;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;


    private final MerchantUserRoleDao merchantUserRoleDao;
    private final NotificationDao notificationDao;

    private final MerchantMapper merchantMapper;
    private final MerchantConfig merchantConfig;
    private final PasswordGenerator passwordGenerator;
    public List<MenuInfo> getMenuIds(String role) {
        switch(role) {
            case SUPER_ADMIN, ADMIN:
                return menuInfoRepository.findAllIds(List.of(UserAccessCode.OPTIONAL_FOR_SUPER_ADMIN_AND_USER.getValue(), UserAccessCode.DEFAULT_FOR_ADMIN_AND_OPTIONAL_FOR_SUPER_ADMIN.getValue()));
            case USER:
                return menuInfoRepository.findAllIds(List.of(UserAccessCode.OPTIONAL_FOR_SUPER_ADMIN_AND_USER.getValue()));
            default:
                throw new MerchantException(ErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(ErrorConstants.INVALID_ERROR_MESSAGE, "Role"));
        }
    }


