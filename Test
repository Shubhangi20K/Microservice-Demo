
@Component
@RequiredArgsConstructor
public class AdminDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantRepository merchantRepository;
    private final MerchantUserDao merchantUserDao;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;
    private final MerchantMapper mapper;
    private final FooterRepository footerRepository;
    private final AdminServicesClient adminServicesClient;
    private final MerchantEntityUserRepository merchantEntityUserRepository;

    public boolean isMerchantUserExistByUserId(UUID userId) {
        return merchantUserDao.isMerchantUserExistByUserId(userId);
    }


@Component
@RequiredArgsConstructor
public class MerchantUserDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserRepository merchantUserRepository;
    private final UserMenuPermissionRepository userMenuPermissionRepository;
    private final DefaultUserPermissionRepository defaultUserPermissionRepository;
    private final MenuInfoRepository menuInfoRepository;
    private final MerchantEntityUserRepository merchantEntityUserRepository;
    private final PermissionRepository permissionRepository;
    private final MerchantUserRoleRepository merchantUserRoleRepository;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;


    private final MerchantUserRoleDao merchantUserRoleDao;
    private final NotificationDao notificationDao;

    private final MerchantMapper merchantMapper;
    private final MerchantConfig merchantConfig;
    private final PasswordGenerator passwordGenerator;
    public boolean isMerchantUserExistByUserId(UUID userId) {
        return merchantUserRepository.findById(userId).isPresent();
    }
