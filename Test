
@Service
@RequiredArgsConstructor
public class AdminService {

    private final OnboardingValidator onboardingValidator;
    private final AdminValidator adminValidator;
    private final AdminDao adminDao;
    private final MerchantEntityGroupMapper merchantEntityGroupMapper;
    private final MerchantMapper merchantMapper;
    private final HelpSupportService helpSupportService;
    private final MerchantBankService merchantBankService;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantUserValidator mIdValidator;
public MerchantResponse<String> approvedBankAccount(MerchantBankAccountApprovalRequest merchantBankAccountApprovalRequest) {
        adminValidator.validateApprovalRequest(merchantBankAccountApprovalRequest);
        return merchantBankService.approvedBankAccount(merchantBankAccountApprovalRequest);
    }



@Service
@RequiredArgsConstructor
public class MerchantBankService {

    private final MerchantBankDao merchantBankDao;
    private final MerchantMapper mapper;
    private final MerchantBankAccountValidator merchantBankAccountValidator;
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    public MerchantResponse<String> approvedBankAccount(MerchantBankAccountApprovalRequest approvalRequest) {
        log.info("Bank Approval Request received  MerchantBankAccountApprovalRequest: {}", approvalRequest);
        //Step 1 : MerchantBankAccountApprovalRequest validation
        merchantBankAccountValidator.validateMerchantAccountApprovalRequest(approvalRequest);

        //Step 2 : Save merchant account details
        merchantBankDao.saveMerchantBankAccount(approvalRequest.getMId(), approvalRequest.getAccountUniqueIdentifier(), approvalRequest.isApproved(), approvalRequest.getRemarks(), approvalRequest.getOperationType());

        log.info("Returning merchant response to user: {}", approvalRequest);
        //Step 3 : Generate response
        return MerchantResponse.<String>builder().status(RESPONSE_SUCCESS).data(List.of(MessageFormat.format(SUCCESS_MESSAGE, "Bank account updated"))).total(1L).build();
    }

@Component
@RequiredArgsConstructor
public class AdminValidator extends BaseValidator {

    private final AdminDao adminDao;
    private final MerchantUserValidator merchantUserValidator;

   public void validateApprovalRequest(MerchantBankAccountApprovalRequest merchantBankAccountApprovalRequest){
        errorDtoList = new ArrayList<>();
        merchantUserValidator.validateMid(merchantBankAccountApprovalRequest.getMId());
        validateLeadingTrailingAndSingleSpace(merchantBankAccountApprovalRequest);
    }
