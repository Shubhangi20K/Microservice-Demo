public MerchantResponse<String> resetPassword(PasswordResetRequest pwdResetRequest) {
        try {
            log.info("Starting pwd reset process for user: {}", pwdResetRequest.getUserName());
            // Step 1 : ValidateResetPassword
            passwordValidator.validateResetPassword(pwdResetRequest);
            // Step 2 : Decrypt PWD
            pwdResetRequest.setNewPassword(decryptValue(merchantConfig.getDecryptionKey(), pwdResetRequest.getNewPassword()));
            pwdResetRequest.setConfirmPassword(decryptValue(merchantConfig.getDecryptionKey(), pwdResetRequest.getConfirmPassword()));
            log.info("PWD reset request decrypted successfully");

            // Step 3: Validate the pwd reset request
            validatePasswordReset(pwdResetRequest);
            log.info("pwd reset request validated successfully");

            // Step 4: Update the pwd details in the database
            passwordManagementDao.updatePasswordDetails(pwdResetRequest.getUserName(), pwdResetRequest.getNewPassword(), List.of(UserStatus.ACTIVE, UserStatus.EXPIRED), RequestType.RESET_PASSWORD);

            // Step 5: Build and return the success response
            return MerchantResponse.<String>builder().status(RESPONSE_SUCCESS).data(List.of(MerchantConstant.PWD_RESET_SUCCESSFULLY)).build();
        } catch (ValidationException e) {
            e.getErrorMessages().stream().filter(errorCode -> MANDATORY_ERROR_CODE.equals(errorCode.getErrorCode())).forEach(errorCode -> {
                throw e;
            });
            handlePasswordFailure(pwdResetRequest.getUserName(), RequestType.RESET_PASSWORD, e.getErrorMessages().stream().map(ErrorDto::toString).collect(Collectors.joining(", ")));
            log.error("PWD Reset Request Validation Failed for passwordResetRequest {} ", pwdResetRequest);
            throw e;
        } catch (MerchantException e) {
            handlePasswordFailure(pwdResetRequest.getUserName(), RequestType.RESET_PASSWORD, e.getErrorMessage());
            log.error("MerchantException : PWD Reset Request Failed for passwordResetRequest {} ", pwdResetRequest);
            throw e;
        } catch (Exception e) {
            handlePasswordFailure(pwdResetRequest.getUserName(), RequestType.RESET_PASSWORD, e.getLocalizedMessage());
            log.error("Generic Exception : PWD Reset Request Failed for passwordResetRequest {} ", pwdResetRequest);
            throw new MerchantException(GENERIC_ERROR_CODE, GENERIC_ERROR_MESSAGE);
        }
    }


catch (ValidationException e) {
            e.getErrorMessages().stream().filter(errorCode -> MANDATORY_ERROR_CODE.equals(errorCode.getErrorCode())).forEach(errorCode -> {
                throw e;
            });
            handlePasswordFailure(pwdResetRequest.getUserName(), RequestType.RESET_PASSWORD, e.getErrorMessages().stream().map(ErrorDto::toString).collect(Collectors.joining(", ")));
            log.error("PWD Reset Request Validation Failed for passwordResetRequest {} ", pwdResetRequest);
            throw e;
        } 
