package com.epay.transaction.dao;

import com.epay.transaction.dto.MerchantPaymentOrderDto;
import com.epay.transaction.dto.RefundBookingDto;
import com.epay.transaction.entity.RefundBooking;
import com.epay.transaction.exceptions.ValidationException;
import com.epay.transaction.mapper.RefundMapper;
import com.epay.transaction.model.request.RefundSearchRequest;
import com.epay.transaction.model.response.RefundResponse;
import com.epay.transaction.repository.RefundRepository;
import com.epay.transaction.specification.RefundBookingSpecification;
import com.epay.transaction.util.enums.TransactionRefundStatus;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.text.MessageFormat;

import static com.epay.transaction.util.TransactionErrorConstants.*;


/**
 * Class Name:RefundDao
 * *
 * Description:
 * *
 * Author:NIRMAL GURJAR
 * <p>
 * Copyright (c) 2025 [State Bank of India]
 * All right reserved
 * *
 * Version:1.0
 */
@Component
@RequiredArgsConstructor
public class RefundDao {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final RefundRepository refundRepository;
    private final RefundMapper refundMapper;
    private final MerchantOrderPaymentDao merchantOrderPaymentDao;

    /**
     * Set the value for refund booking DTO and save refund booking details
     *
     * @param refundBookingDto RefundBookingDto
     * @return RefundBookingDto
     */
    @Transactional
    public RefundResponse saveRefundBooking(RefundBookingDto refundBookingDto, MerchantPaymentOrderDto merchantPaymentOrderDto) {

        logger.info("Call saveRefundBooking for arrn: {}", refundBookingDto.getArrnNumber());
        RefundBooking refundBooking = refundRepository.save(refundMapper.dtoToEntity(refundBookingDto));
        refundBookingDto = refundMapper.entityToDto(refundBooking);

        logger.info("Updating merchant order payment after refund for arrn: {}", refundBookingDto.getArrnNumber());
        merchantPaymentOrderDto = updateMerchantPayment(refundBookingDto, merchantPaymentOrderDto);

        return refundMapper.mapToRefundResponse(refundBookingDto, merchantPaymentOrderDto);
    }

    /**
     * Set the value for transaction DTO and save transaction details
     *
     * @param refundBookingDto        RefundBookingDto
     * @param merchantPaymentOrderDto MerchantPaymentOrderDto
     * @return MerchantPaymentOrderDto
     */
    public MerchantPaymentOrderDto updateMerchantPayment(RefundBookingDto refundBookingDto, MerchantPaymentOrderDto merchantPaymentOrderDto) {
        merchantPaymentOrderDto.setAvailableRefundAmount(merchantPaymentOrderDto.getAvailableRefundAmount().subtract(refundBookingDto.getRefundAmount()));
        merchantPaymentOrderDto.setRefundStatus(merchantPaymentOrderDto.getAvailableRefundAmount().compareTo(BigDecimal.ZERO) > 0 ? TransactionRefundStatus.PARTIAL_REFUND_BOOKED : TransactionRefundStatus.FULL_REFUND_BOOKED );
        return merchantOrderPaymentDao.save(merchantPaymentOrderDto);
    }

    public MerchantPaymentOrderDto findByAtrnNumber(String atrnNumber) {
        logger.info("find payment by atrn for arrn: {}", atrnNumber);
        return merchantOrderPaymentDao.findByAtrnNumber(atrnNumber);
    }

    /**
     * find refund status for an ARRN
     *
     * @return RefundBookingDto
     */
    public RefundBookingDto findRefundBookingByARRN(String arrn) {
        logger.info("Get findRefundBookingByARRN for arrn: {}", arrn);
        RefundBooking refundBooking = refundRepository.findByArrnNumber(arrn).orElseThrow(() -> new ValidationException(NOT_FOUND_ERROR_CODE, MessageFormat.format(NOT_FOUND_ERROR_MESSAGE, REFUND_BOOKING_DETAIL)));
        return refundMapper.entityToDto(refundBooking);
    }

    /**
     * search refund details for requested parameters
     *
     * @return Page<RefundBookingDto>
     */
    public Page<RefundBookingDto> searchRefundBookingRequest(RefundSearchRequest refundSearchRequest, Pageable pageable) {
        logger.info("inside SearchRefund for mId: {}", refundSearchRequest.getMId());
        Specification<RefundBooking> specification = RefundBookingSpecification.searchRefund(refundSearchRequest);
        Page<RefundBooking> refundBookingPage = refundRepository.findAll(specification, pageable);
        return refundMapper.entityToDto(refundBookingPage);
    }
}
