
package com.epay.transaction.externalservice;
/*
 * Copyright (c) [2024] [State Bank of India]
 * All rights reserved.
 * <p>
 * Author:@V0000001(Shilpa Kothre)
 * Version:1.0
 */

import com.epay.transaction.client.ApiClient;
import com.epay.transaction.externalservice.request.kms.KMSAPIKeyValidationRequest;
import com.epay.transaction.externalservice.response.kms.KMSEncryptionKeysResponse;
import com.epay.transaction.model.response.TransactionResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;

public class KmsServicesClient extends ApiClient {

    private static final Logger LOGGER = LoggerFactory.getLogger(KmsServicesClient.class);

    public static final String GET_ENCRYPTION_KEY = "/key/encryption/";
    public static final String API_KEY_VALIDATION = "/key/validated/api";

    public KmsServicesClient(String baseUrl) {
        super(baseUrl);
    }

    /**
     * Validates the merchant API key ID and secret.
     *
     * @param merchantApiKeyId    The merchant's API key ID.
     * @param merchantApiKeySecret The merchant's API key secret.
     * @return TransactionResponse<String> containing the validation result.
     */
    public TransactionResponse<String> validateAPIKeyIdAndSecret(String merchantApiKeyId, String merchantApiKeySecret) {
        LOGGER.info("Validating API Key ID and Secret for Merchant API Key ID: {}", merchantApiKeyId);
        TransactionResponse<String> response = post(API_KEY_VALIDATION, 
            KMSAPIKeyValidationRequest.builder()
                .apiKey(merchantApiKeyId)
                .apiKeySecret(merchantApiKeySecret)
                .build(), 
            new ParameterizedTypeReference<>() {});
        LOGGER.info("Validation response received for Merchant API Key ID: {}", merchantApiKeyId);
        return response;
    }

    /**
     * Retrieves the encryption key for a given merchant ID.
     *
     * @param mId The merchant ID.
     * @return TransactionResponse<KMSEncryptionKeysResponse> containing the encryption key details.
     */
    public TransactionResponse<KMSEncryptionKeysResponse> getEncryptionKeys(String mId) {
        LOGGER.info("Fetching encryption keys for Merchant ID: {}", mId);
        TransactionResponse<KMSEncryptionKeysResponse> response = get(GET_ENCRYPTION_KEY + mId, new ParameterizedTypeReference<>() {});
        LOGGER.info("Encryption key response received for Merchant ID: {}", mId);
        return response;
    }
}
