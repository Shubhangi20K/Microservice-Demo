    @Test
    void saveMerchantBankAccount_shouldSaveNewAccountSuccessfully() {
        // Arrange
        when(mapper.mapDtoToEntity(mockDto)).thenReturn(mockEntity);
        when(merchantConfig.getDecryptionKey()).thenReturn("dummyKey");
        when(merchantBankAccountRepository.save(any(MerchantBankAccount.class))).thenReturn(mockEntity);

        // Act
        merchantBankDao.saveMerchantBankAccount(mockDto, true);

        // Assert
        verify(merchantBankAccountRepository, times(1)).save(any(MerchantBankAccount.class));
    }

    @Transactional
    public void saveMerchantBankAccount(MerchantBankAccountDto merchantBankAccountDto, boolean isCreate) {
        MerchantBankAccount merchantBankAccount = mapper.mapDtoToEntity(merchantBankAccountDto);
        //Before masking decrypt the account Number
        String accountNumber = decryptValue(merchantConfig.getDecryptionKey(), merchantBankAccountDto.getAccountNumber());
        //Masking accountNumber
        merchantBankAccount.setAccountNumberMasked(maskAccountNumber(accountNumber));
        checkPrimaryAccountAndUpdate(merchantBankAccount);
        saveMerchantBankAccount(isCreate, merchantBankAccount);
    }

here it's breaking 
   public static String decryptValue(String key, String value) {
        return DecryptionService.decryptValueByStringKey(key, value, EncryptionDecryptionAlgo.AES_GCM_NO_PADDING, GCMIvLength.MAXIMUM, GCMTagLength.STANDARD);
    }

-9
java.lang.NegativeArraySizeException: -9
	at com.sbi.epay.encryptdecrypt.service.DecryptionService.decrypt(DecryptionService.java:98)
	at com.sbi.epay.encryptdecrypt.service.DecryptionService.decryptValueBySecretKey(DecryptionService.java:67)
	at com.sbi.epay.encryptdecrypt.service.DecryptionService.decryptValueByStringKey(DecryptionService.java:51)
	at com.epay.merchant.util.EncryptionDecryptionUtil.decryptValue(EncryptionDecryptionUtil.java:45)
	at com.epay.merchant.dao.MerchantBankDao.saveMerchantBankAccount(MerchantBankDao.java:60)
	at com.epay.merchant.dao.MerchantBankDaoTest.saveMerchantBankAccount_shouldSaveNewAccountSuccessfully(MerchantBankDaoTest.java:112)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
