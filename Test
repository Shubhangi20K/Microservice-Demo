
package com.epay.transaction.mapper;

import com.epay.transaction.dto.MerchantPaymentOrderDto;
import com.epay.transaction.entity.MerchantOrderPayment;
import com.epay.transaction.model.response.MerchantOrderResponse;
import org.mapstruct.Builder;
import org.mapstruct.Mapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Class Name: MerchantOrderPaymentMapper
 * 
 * Description: This interface defines the mapping between 
 * MerchantOrderPayment entity, DTO, and response model using MapStruct.
 * 
 * Author: V1014352 (Ranjan Kumar)
 * 
 * Copyright (c) 2025 [State Bank of India]
 * All rights reserved.
 * 
 * Version: 1.0
 */
@Mapper(builder = @Builder(disableBuilder = true), componentModel = "spring")
public interface MerchantOrderPaymentMapper {

    Logger logger = LoggerFactory.getLogger(MerchantOrderPaymentMapper.class);

    /**
     * Converts MerchantPaymentOrderDto to MerchantOrderPayment entity.
     *
     * @param merchantPaymentOrderDto the DTO containing merchant order payment details
     * @return the entity representation of the merchant order payment
     */
    MerchantOrderPayment dtoToEntity(MerchantPaymentOrderDto merchantPaymentOrderDto);

    /**
     * Converts MerchantOrderPayment entity to MerchantPaymentOrderDto.
     *
     * @param merchantOrderPayment the entity containing merchant order payment details
     * @return the DTO representation of the merchant order payment
     */
    MerchantPaymentOrderDto entityToDto(MerchantOrderPayment merchantOrderPayment);

    /**
     * Converts MerchantOrderPayment entity to MerchantOrderResponse.
     *
     * @param merchantOrderPayment the entity containing merchant order payment details
     * @return the response model representation of the merchant order payment
     */
    MerchantOrderResponse entityToMerchantOrderResponse(MerchantOrderPayment merchantOrderPayment);
}
