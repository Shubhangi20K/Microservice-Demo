
@Service
@RequiredArgsConstructor
public class MerchantUserService {

    private final MerchantInfoDao merchantInfoDao;
    private final MerchantUserDao merchantUserDao;
    private final MerchantUserRoleDao merchantUserRoleDao;
    private final MerchantUserValidator merchantUserValidator;
    private final MerchantMapper merchantMapper;
    private final CSVGenerator csvGenerator;
    protected static final List<String> USER_DOWNLOAD_HEADER = List.of("User Id", "Name", "Email", "Mobile No.", "User Type", "Status", "Creation Date");
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass())
public MerchantResponse<MerchantUserResponse> searchMerchantUsers(Pageable pageable, MerchantUserSearchRequest merchantUserSearchRequest) {
        log.info("Search merchant users Request {}", merchantUserSearchRequest);
        merchantUserValidator.validateUserSearchRequest(merchantUserSearchRequest);
        List<UUID> mappedUserIds = merchantUserDao.getMappedUserIdsByMid(merchantUserSearchRequest.getMId());
        Page<MerchantUserDto> merchantUsers = merchantUserDao.findMerchantUsers(pageable, merchantUserSearchRequest, mappedUserIds);
        List<MerchantUserResponse> merchantUserResponseList = merchantMapper.mapMerchantUserDTOListToResponseList(merchantUsers.getContent());
        log.info("Returning list of merchant users {}", merchantUserResponseList);
        return MerchantResponse.<MerchantUserResponse>builder().status(RESPONSE_SUCCESS).data(merchantUserResponseList).count(merchantUsers.stream().count()).total(merchantUsers.getTotalElements()).build();
    }



@Component
@RequiredArgsConstructor
public class MerchantUserDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserRepository merchantUserRepository;
    private final UserMenuPermissionRepository userMenuPermissionRepository;
    private final DefaultUserPermissionRepository defaultUserPermissionRepository;
    private final MenuInfoRepository menuInfoRepository;
    private final MerchantEntityUserRepository merchantEntityUserRepository;
    private final PermissionRepository permissionRepository;
    private final MerchantUserRoleRepository merchantUserRoleRepository;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;


    private final MerchantUserRoleDao merchantUserRoleDao;
    private final NotificationDao notificationDao;

    private final MerchantMapper merchantMapper;
    private final MerchantConfig merchantConfig;
    private final PasswordGenerator passwordGenerator;

    public Page<MerchantUserDto> findMerchantUsers(Pageable pageable, MerchantUserSearchRequest merchantUserSearchRequest, List<UUID> mappedUserIds) {
        String username = EPayIdentityUtil.getUserPrincipal().getUsername();
        MerchantUserDto merchantUser = getByUserName(username, UserStatus.ACTIVE);
        Specification<MerchantUser> specification = MerchantUserSpecification.searchUsers(merchantUser.getId(), merchantUserSearchRequest.getUserName(), merchantUserSearchRequest.getFirstName(), merchantUserSearchRequest.getMobilePhone(), merchantUserSearchRequest.getFromDate(), merchantUserSearchRequest.getToDate(), merchantUserSearchRequest.getStatus(), mappedUserIds);
        return merchantUserRepository.findAll(specification, pageable).map(this::convertEntityToDTO);
    }

@Component
@RequiredArgsConstructor
public class MerchantUserDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserRepository merchantUserRepository;
    private final UserMenuPermissionRepository userMenuPermissionRepository;
    private final DefaultUserPermissionRepository defaultUserPermissionRepository;
    private final MenuInfoRepository menuInfoRepository;
    private final MerchantEntityUserRepository merchantEntityUserRepository;
    private final PermissionRepository permissionRepository;
    private final MerchantUserRoleRepository merchantUserRoleRepository;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;


    private final MerchantUserRoleDao merchantUserRoleDao;
    private final NotificationDao notificationDao;

    private final MerchantMapper merchantMapper;
    private final MerchantConfig merchantConfig;
    private final PasswordGenerator passwordGenerator;
    public List<UUID> getMappedUserIdsByMid(String mId) {
        List<UUID> userIds = merchantEntityUserRepository.findUserIdsByMId(mId);
        userIds.addAll(merchantEntityGroupRepository.getAllUserIdByMId(mId));
        return userIds;
    }
}

@Component
@RequiredArgsConstructor
public class MerchantUserValidator extends BaseValidator {

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantUserDao merchantUserDao;
    private final MerchantInfoDao merchantInfoDao;
    private final OtpManagementDao otpManagementDao;
    private final MerchantBankAccountValidator merchantBankAccountValidator;

    public void validateUserSearchRequest(MerchantUserSearchRequest merchantUserSearchRequest) {
        errorDtoList = new ArrayList<>();
        checkMandatoryField(merchantUserSearchRequest.getMId(), MID);
        throwIfErrors();
        checkForLeadingTrailingAndSingleSpace(merchantUserSearchRequest);
        validateFieldValues(merchantUserSearchRequest);
        merchantBankAccountValidator.validateMId(merchantUserSearchRequest.getMId());
    }

package com.epay.merchant.mapper;

import com.epay.merchant.dto.MerchantBankAccountDto;
import com.epay.merchant.dto.MerchantDto;
import com.epay.merchant.dto.MerchantInfoDto;
import com.epay.merchant.dto.MerchantUserDto;
import com.epay.merchant.entity.MerchantBankAccount;
import com.epay.merchant.entity.MerchantInfo;
import com.epay.merchant.entity.MerchantUser;
import com.epay.merchant.model.request.MerchantBankAccountRequest;
import com.epay.merchant.model.request.MerchantUserRequest;
import com.epay.merchant.model.response.MerchantBankAccountResponse;
import com.epay.merchant.model.response.MerchantInfoResponse;
import com.epay.merchant.model.response.MerchantUserResponse;
import com.epay.merchant.model.response.UserProfileResponse;
import org.mapstruct.AfterMapping;
import org.mapstruct.Builder;
import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;

import java.util.List;


/**
 * Class Name: MerchantMapper
 * Description: MerchantMapper uses MapStruct,
 * MapStruct  is a code generator that greatly simplifies the implementation of
 * mappings between Java bean types based on a convention over configuration approach.
 * Author: Rahul Kumar
 * Copyright (c) 2024 [State Bank of India]
 * All rights reserved.
 * Version: 1.0
 */

@Mapper(builder = @Builder(disableBuilder = true), componentModel = "spring")
public interface MerchantMapper {
  List<MerchantUserResponse> mapMerchantUserDTOListToResponseList(List<MerchantUserDto> merchantUserDtos);
