import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import jakarta.validation.ValidationException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class ThemeServiceTest {

    @InjectMocks
    private ThemeService themeService; // Service being tested

    @Mock
    private ThemeDao themeDao; // Mocked DAO dependency

    private ThemeDto themeDto;

    @BeforeEach
    void setUp() {
        themeDto = new ThemeDto();
        themeDto.setMId("12345"); // Setting up test data
    }

    @Test
    void validatedAlreadyPresentCreate_WhenThemeExists_ShouldThrowValidationException() {
        // Mocking behavior: Theme already exists
        when(themeDao.isPaymentPageThemeExistByMId(themeDto.getMId())).thenReturn(true);

        // Assertion: Should throw ValidationException
        ValidationException exception = assertThrows(ValidationException.class,
            () -> themeService.validatedAlreadyPresentCreate(themeDto));

        // Verify error message
        assertEquals("The theme with MId already exists", exception.getMessage());

        // Verify method call
        verify(themeDao, times(1)).isPaymentPageThemeExistByMId(themeDto.getMId());
    }

    @Test
    void validatedAlreadyPresentCreate_WhenThemeDoesNotExist_ShouldNotThrowException() {
        // Mocking behavior: Theme does not exist
        when(themeDao.isPaymentPageThemeExistByMId(themeDto.getMId())).thenReturn(false);

        // Assertion: Should not throw any exception
        assertDoesNotThrow(() -> themeService.validatedAlreadyPresentCreate(themeDto));

        // Verify method call
        verify(themeDao, times(1)).isPaymentPageThemeExistByMId(themeDto.getMId());
    }
}
