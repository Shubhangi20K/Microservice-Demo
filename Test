

@Service
@RequiredArgsConstructor
public class AlertService {
    public MerchantResponse<AlertManagementResponse> getAllAlertsByMId(String mId, Pageable pageable) {
        log.info("Fetching unread alert descriptions for mId: {}", mId);
        merchantUserValidator.validateMid(mId);
        Page<AlertManagementResponse> alertManagementResponses = alertDao.getAllAlerts(mId, pageable);
        return MerchantResponse.<AlertManagementResponse>builder().status(RESPONSE_SUCCESS).data(alertManagementResponses.getContent()).count(alertManagementResponses.stream().count()).total(alertManagementResponses.getTotalElements()).build();

    }



@Repository
@RequiredArgsConstructor
public class AlertDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final AlertMasterRepository alertMasterRepository;
    private final AlertManagementRepository alertManagementRepository;
    private final MerchantInfoDao merchantInfoDao;
    private final AlertMapper alertMapper;

    public Page<AlertManagementResponse> getAllAlerts(String mId, Pageable pageable) {
        return getLatestAlertDescription(mId, true, pageable);
    }


@Repository
@RequiredArgsConstructor
public class AlertDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final AlertMasterRepository alertMasterRepository;
    private final AlertManagementRepository alertManagementRepository;
    private final MerchantInfoDao merchantInfoDao;
    private final AlertMapper alertMapper;
 private Page<AlertManagementResponse> getLatestAlertDescription(String mId, boolean getAll, Pageable pageable) {
        // Get user roles
        List<String> userRoles = EPayIdentityUtil.getUserPrincipal().getUserRole();
        boolean isUser = checkIsUserRole(userRoles);
        Page<AlertManagement> alertManagementList;
        if (isUser) {
            List<AlertMasterDto> accountExpiryAlerts = findAllAlertByName(ACCOUNT_EXPIRY);
            List<UUID> excludedAlertIds = getAlertMasterId(accountExpiryAlerts);
            alertManagementList = getAll
                    ? alertManagementRepository.findAlerts(mId, excludedAlertIds, pageable)
                    : alertManagementRepository.findUnreadAlerts(mId, excludedAlertIds, pageable);
        } else {
            alertManagementList = getAll
                    ? alertManagementRepository.findByMId(mId, pageable)
                    : alertManagementRepository.findUnreadAlertsByMId(mId, pageable);
        }
        List<AlertManagementResponse> responses = alertMapper.alertManagementEntityToResponse(alertManagementList.getContent());
        return new PageImpl<>(responses, pageable, alertManagementList.getTotalElements());
    }
