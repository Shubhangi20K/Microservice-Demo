package com.epay.transaction.externalservice;


import com.epay.transaction.client.ApiClient;
import com.epay.transaction.externalservice.request.admin.BinCheckRequest;
import com.epay.transaction.externalservice.request.admin.CurrencyRequest;
import com.epay.transaction.externalservice.request.admin.GatewayConfigDetailsRequest;
import com.epay.transaction.externalservice.request.admin.MerchantPricingRequest;
import com.epay.transaction.externalservice.response.admin.*;
import com.epay.transaction.model.response.TransactionResponse;
import com.fasterxml.jackson.databind.JsonNode;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import org.springframework.core.ParameterizedTypeReference;

import java.util.List;
import java.util.Map;


public class AdminServicesClient extends ApiClient {

    public static final String GET_MULTI_ACCOUNT = "/merchant/multiaccountdetails/";
    private static final String MERCHANT = "/merchant/";
    private static final String MERCHANT_CONFIG_DETAILS_ENDPOINT = "/merchant/gatewayconfigdetails";
    private static final String PRICING_API_ENDPOINT = "/merchant/pricing";
    private static final String VVL_API_ENDPOINT = "/merchant/getmerchantvvldetails/";
    private static final String BIN_CHECK_ENDPOINT = "/merchant/cards/binCheck";
    private static final String MERCHANT_PAYMODE_ENDPOINT = "/merchant/paymode/";
    private static final String GET_RFC_DETAILS = "/merchant/getMerchantRfcDetails/";
    private static final String CURRENCY_CHK_ENDPOINT = "/merchant/validatecurrency";

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    public AdminServicesClient(String baseUrl) {
        super(baseUrl);
    }


    public TransactionResponse<MerchantInfoResponse> getMerchantInfoByMId(String mId) {
        return post(MERCHANT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<MerchantRfcDetailsResponse> getMerchantRFCInfo(String mId) {
        return post(GET_RFC_DETAILS + mId, mId, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<Map<String, List<String>>> getMultiAccountDetailsApi(String mId) {
        return post(GET_MULTI_ACCOUNT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<GatewayConfigDetailsResponse> getGatewayConfigDetails(String mId, String gtwMapId) {
        GatewayConfigDetailsRequest gatewayConfigDetailsRequest = GatewayConfigDetailsRequest.builder().aggGtwMapId(gtwMapId).mId(mId).build();
        return post(MERCHANT_CONFIG_DETAILS_ENDPOINT, gatewayConfigDetailsRequest, new ParameterizedTypeReference<>() {});
    }

    /**
     * This method is used to fetch bin-check status from admin service.
     *
     * @param request cardBin
     * @return BinCheck Response
     */

    public TransactionResponse<BinCheckResponse> binCheckRequest(BinCheckRequest request) {
        logger.info("Preparing to fetch binCheck status from admin-service client");
        return post(BIN_CHECK_ENDPOINT, request, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<JsonNode> getMerchantPayModeInfo(String mId) {
        logger.info("Inside getMerchantPayModeInfo for mId: {}", mId);
        return post(MERCHANT_PAYMODE_ENDPOINT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * This Method Is Used To Get The Pricing Structure From Admin Service.
     *
     * @param merchantPricingRequest pricing request details
     * @return Merchant Pricing Response.
     */
    public TransactionResponse<MerchantPricingResponse> getMerchantPricingStructure(MerchantPricingRequest merchantPricingRequest) {
        logger.info("Preparing request to get pricing structure from admin service", merchantPricingRequest);
        return post(PRICING_API_ENDPOINT, merchantPricingRequest, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<MerchantVolumeVelocityResponse> geVvlDetails(String mId) {
        logger.info("Inside getMerchantPayModeInfo for mId: {}", mId);
        return post(VVL_API_ENDPOINT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    public TransactionResponse<?> getCurrencyValidate(CurrencyRequest currencyRequest) {
        logger.info("Inside getCurrency: {}", currencyRequest);
        return post(CURRENCY_CHK_ENDPOINT, currencyRequest, new ParameterizedTypeReference<>() {});
    }
}
