@ExtendWith(MockitoExtension.class)
class PasswordServiceTest {

    @Mock
    private PasswordValidator passwordValidator;

    @Mock
    private PasswordManagementDao passwordManagementDao;

    @Mock
    private MerchantConfig merchantConfig;

    @InjectMocks
    private PasswordService passwordService;

    @Test
    void testChangePassword_ValidationExceptionWithMandatoryError() {
        // Arrange
        PasswordChangeRequest request = new PasswordChangeRequest();
        request.setUserName("testUser");
        request.setNewPassword("encryptedNewPassword");
        request.setConfirmPassword("encryptedConfirmPassword");

        // Mock the decryption key
        when(merchantConfig.getDecryptionKey()).thenReturn("dummyKey");

        // Create a mandatory error
        ErrorDto mandatoryError = new ErrorDto();
        mandatoryError.setErrorCode("MANDATORY_FIELD_MISSING");

        // Create ValidationException with the mandatory error
        ValidationException validationException = new ValidationException(List.of(mandatoryError));

        // Make validator throw the exception
        doThrow(validationException).when(passwordValidator).validateChangePassword(any());

        // Act & Assert
        ValidationException thrown = assertThrows(ValidationException.class, () -> {
            passwordService.changePassword(request);
        });

        // Verify the error message or log (optional)
        assertEquals(1, thrown.getErrorMessages().size());
        assertEquals("MANDATORY_FIELD_MISSING", thrown.getErrorMessages().get(0).getErrorCode());

        verify(passwordValidator).validateChangePassword(any());
        verify(passwordManagementDao, never()).updatePasswordDetails(any(), any(), any(), any());
    }
}
