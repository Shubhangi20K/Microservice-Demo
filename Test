
package com.epay.transaction.dao;

import com.epay.transaction.exceptions.TransactionException;
import com.epay.transaction.externalservice.EISServicesClient;
import com.epay.transaction.model.request.EISCardNumberRequest;
import com.epay.transaction.model.response.EncryptedResponse;
import com.epay.transaction.model.response.TransactionResponse;
import com.epay.transaction.util.TransactionConstant;
import com.epay.transaction.util.TransactionErrorConstants;
import com.sbi.epay.authentication.providers.EPayTokenProvider;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;

import static com.epay.transaction.util.EncryptionDecryptionUtil.encryptValue;
import static com.epay.transaction.util.TransactionUtil.toJson;

@Component
@RequiredArgsConstructor
public class EISDao {

    private static final Logger logger = LoggerFactory.getLogger(EISDao.class);

    private final EISServicesClient eisServicesClient;
    private final TokenDao tokenDao;
    private final EPayTokenProvider ePayTokenProvider;

    /**
     * Retrieves the AES encryption key used for securing transactions.
     *
     * @return AES encryption key as a string.
     */
    public String getEncryptionAESKey() {
        logger.info("Fetching AES encryption key");
        return tokenDao.getEncryptionAESKey(ePayTokenProvider.getToken());
    }

    /**
     * Retrieves the ECOM flag for the given card number request.
     *
     * @param eisCardNumberRequest The request containing the card number.
     * @param key                  The encryption key for securing the response.
     * @return Encrypted response containing the ECOM flag.
     */
    public EncryptedResponse getECOMFlag(EISCardNumberRequest eisCardNumberRequest, String key) {
        logger.info("Fetching ECOM flag for cardNumber: {}", eisCardNumberRequest.getCardNumber());
        TransactionResponse<String> response = eisServicesClient.getECOMFlag(eisCardNumberRequest.getCardNumber());
        return handleResponse(response, eisCardNumberRequest.getCardNumber(), key);
    }

    /**
     * Retrieves GSTIN details for the given card number request.
     *
     * @param eisCardNumberRequest The request containing the card number.
     * @param key                  The encryption key for securing the response.
     * @return Encrypted response containing GSTIN details.
     */
    public EncryptedResponse getGstInDetails(EISCardNumberRequest eisCardNumberRequest, String key) {
        logger.info("Fetching GSTIN details for cardNumber: {}", eisCardNumberRequest.getCardNumber());
        TransactionResponse<String> response = eisServicesClient.getGstInDetails(eisCardNumberRequest.getCardNumber());
        return handleResponse(response, eisCardNumberRequest.getCardNumber(), key);
    }

    /**
     * Handles the response received from EIS services, encrypting the data if successful
     * or throwing an exception if an error occurs.
     *
     * @param response   The transaction response.
     * @param cardNumber The card number associated with the request.
     * @param key        The encryption key for securing the response.
     * @param <T>        The type of the response data.
     * @return Encrypted response containing the processed data.
     * @throws TransactionException if the response contains errors or no data is found.
     */
    private <T> EncryptedResponse handleResponse(TransactionResponse<T> response, String cardNumber, String key) {
        if (response.getStatus() == TransactionConstant.RESPONSE_SUCCESS && CollectionUtils.isNotEmpty(response.getData())) {
            logger.info("Successfully fetched data for cardNumber: {}", cardNumber);
            String encryptionResponse = encryptValue(key, toJson(response.getData().getFirst()));
            return EncryptedResponse.builder().encryptedResponse(encryptionResponse).build();
        } else if (response.getStatus() == TransactionConstant.RESPONSE_FAILURE && CollectionUtils.isNotEmpty(response.getErrors())) {
            logger.error("Error fetching data for cardNumber: {} - Errors: {}", cardNumber, response.getErrors());
            throw new TransactionException(response.getErrors());
        }
        logger.warn("No data found for cardNumber: {}", cardNumber);
        throw new TransactionException(TransactionErrorConstants.NOT_FOUND_ERROR_CODE,
                MessageFormat.format(TransactionErrorConstants.NOT_FOUND_ERROR_MESSAGE, cardNumber));
    }
}
