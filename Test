package com.epay.transaction.dao;

import com.epay.transaction.dto.MerchantPaymentOrderDto;
import com.epay.transaction.exceptions.TransactionException;
import com.epay.transaction.externalservice.PaymentServicesClient;
import com.epay.transaction.externalservice.request.payment.*;
import com.epay.transaction.externalservice.response.payment.*;
import com.epay.transaction.model.request.PaymentInitiationRequest;
import com.epay.transaction.model.response.EncryptedResponse;
import com.epay.transaction.model.response.TransactionResponse;
import com.epay.transaction.util.TransactionConstant;
import com.epay.transaction.util.TransactionErrorConstants;
import com.epay.transaction.util.enums.PayMode;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Service;

import java.text.MessageFormat;

import static com.epay.transaction.util.EncryptionDecryptionUtil.encryptValue;
import static com.epay.transaction.util.TransactionUtil.toJson;
import static com.epay.transaction.util.enums.PayMode.getPayMode;

/**
 * Class Name:PaymentDao
 * *
 * Description:
 * *
 * Author:V1014352(Ranjan Kumar)
 * <p>
 * Copyright (c) 2025 [State Bank of India]
 * All right reserved
 * *
 * Version:1.0
 */
@Service
@RequiredArgsConstructor
public class PaymentDao {
    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    private final PaymentServicesClient paymentServicesClient;

    public EncryptedResponse paymentInitiation(String payModeString, MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest, String key) {
        logger.info("paymentInitiation Started for payMode:{}, merchantPaymentOrderDto:{}, paymentInitiationRequest:{}", payModeString, merchantPaymentOrderDto, paymentInitiationRequest);
        PayMode payMode = getPayMode(payModeString);
        return switch (payMode) {
            case CC, DC, PC -> processCardPayment(merchantPaymentOrderDto, paymentInitiationRequest, key);
            case NB ->
                    TransactionConstant.SBI_NAME.equalsIgnoreCase(paymentInitiationRequest.getChannelBank()) ? initiateNetBankingPayment(merchantPaymentOrderDto, key) : initiateOtherINBPayment(merchantPaymentOrderDto, key);
            case UPI -> handleUpiPayment(merchantPaymentOrderDto, paymentInitiationRequest, key);
            default ->
                    throw new TransactionException(TransactionErrorConstants.INVALID_ERROR_CODE, MessageFormat.format(TransactionErrorConstants.INVALID_ERROR_MESSAGE, payMode, "PayMode is not configured for payment"));
        };
    }

    public EncryptedResponse validateUPIPaymentVpa(PaymentUPIVpaRequest paymentUPIVpaRequest, String key) {
        TransactionResponse<PaymentUPIVpaResponse> response = paymentServicesClient.validateUPIPaymentVpa(paymentUPIVpaRequest);
        return handleResponse(response, key, TransactionConstant.PAYMENT_TYPE_VPA);
    }

    public EncryptedResponse upiPaymentStatusEnquiry(PaymentStatusRequest paymentStatusRequest, String key) {
        TransactionResponse<PaymentUPIStatusResponse> response = paymentServicesClient.upiPaymentStatusEnquiry(paymentStatusRequest);
        return handleResponse(response, key, TransactionConstant.PAYMENT_TYPE_VPA);
    }

    private EncryptedResponse processCardPayment(MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest, String key) {
        PaymentCardRequest paymentCardRequest = buildPaymentCardRequest(merchantPaymentOrderDto, paymentInitiationRequest);
        if (paymentInitiationRequest.getPayProcId().equalsIgnoreCase(TransactionConstant.PAYMENT_TYPE_VISA) || paymentInitiationRequest.getPayProcId().equalsIgnoreCase(TransactionConstant.PAYMENT_TYPE_MASTER)) {
            TransactionResponse<PaymentVisaCardResponse> response = paymentServicesClient.initiateVisaAndMasterCardAPI(paymentCardRequest);
            return handleResponse(response, key, paymentInitiationRequest.getPayProcId());
        }
        TransactionResponse<PaymentRupayCardResponse> response = paymentServicesClient.initiateRupPayCardAPI(paymentCardRequest);
        return handleResponse(response, key, paymentInitiationRequest.getPayProcId());
    }

    private EncryptedResponse initiateNetBankingPayment(MerchantPaymentOrderDto merchantPaymentOrderDto, String key) {
        TransactionResponse<PaymentResponse> response = paymentServicesClient.initiateSBIINBPayments(PaymentINBRequest.builder().atrn(merchantPaymentOrderDto.getAtrnNumber()).build());
        return handleResponse(response, key, PayMode.NB.name());
    }

    private EncryptedResponse initiateOtherINBPayment(MerchantPaymentOrderDto merchantPaymentOrderDto, String key) {
        TransactionResponse<PaymentOtherInbResponse> response = paymentServicesClient.initiateOtherINBPayments(buildPaymentOtherInbRequest(merchantPaymentOrderDto));
        return handleResponse(response, key, PayMode.NB.name());
    }

    private EncryptedResponse handleUpiPayment(MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest, String key) {
        if (paymentInitiationRequest.getPayProcId().equalsIgnoreCase(TransactionConstant.PAY_PROC_ID_SELF)) {
            TransactionResponse<PaymentUPIVpaCollectGatewayResponse> response = paymentServicesClient.initiateUPIVPAPayments(buildPaymentUPIRequest(merchantPaymentOrderDto, paymentInitiationRequest));
            return handleResponse(response, key, PayMode.UPI.name());
        } else if (paymentInitiationRequest.getPayProcId().equalsIgnoreCase(TransactionConstant.PAY_PROC_ID_BHIMQR)) {
            TransactionResponse<PaymentQRResponse> response = paymentServicesClient.initiateUPIQRPayments(buildPaymentUPIQRRequest(merchantPaymentOrderDto, paymentInitiationRequest));
            return handleResponse(response, key, PayMode.UPI.name());
        }
        throw new TransactionException(TransactionErrorConstants.INVALID_ERROR_CODE, TransactionErrorConstants.INVALID_ERROR_MESSAGE);
    }

    private PaymentOtherINBReqest buildPaymentOtherInbRequest(MerchantPaymentOrderDto merchantPaymentOrderDto) {
        return PaymentOtherINBReqest.builder().atrn(String.valueOf(merchantPaymentOrderDto.getAtrnNumber())).build();
    }

    private PaymentCardRequest buildPaymentCardRequest(MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest) {
        return PaymentCardRequest.builder().altNumber(paymentInitiationRequest.getAltNumber()).cardHolderName(paymentInitiationRequest.getCardHolderName()).cvv(paymentInitiationRequest.getCvv()).gtwMapsId(paymentInitiationRequest.getGtwMapsId()).expiryMonth(paymentInitiationRequest.getExpiryMonth()).expiryYear(paymentInitiationRequest.getExpiryYear()).operatingMode(paymentInitiationRequest.getOperatingMode()).payProcId(paymentInitiationRequest.getPayProcId()).payProcType(paymentInitiationRequest.getPayProcType()).merchPostedAmount(paymentInitiationRequest.getMerchPostedAmount()).transactionAmount(paymentInitiationRequest.getTransactionAmount()).mId(merchantPaymentOrderDto.getMId()).atrn(String.valueOf(merchantPaymentOrderDto.getAtrnNumber())).paymode(merchantPaymentOrderDto.getPayMode()).build();
    }

    private PaymentUPIRequest buildPaymentUPIRequest(MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest) {
        return PaymentUPIRequest.builder().payGtwMapId(paymentInitiationRequest.getGtwMapsId()).virtualAddress(paymentInitiationRequest.getUpiAddress()).atrn(String.valueOf(merchantPaymentOrderDto.getAtrnNumber())).build();
    }

    private PaymentUPIQRRequest buildPaymentUPIQRRequest(MerchantPaymentOrderDto merchantPaymentOrderDto, PaymentInitiationRequest paymentInitiationRequest) {
        return PaymentUPIQRRequest.builder().gtwMapId(paymentInitiationRequest.getGtwMapsId()).pspRefNo(String.valueOf(merchantPaymentOrderDto.getAtrnNumber())).build();
    }

    private <T> EncryptedResponse handleResponse(TransactionResponse<T> response, String paymentType, String key) {
        if (TransactionConstant.RESPONSE_SUCCESS == response.getStatus() && CollectionUtils.isNotEmpty(response.getData())) {
            String encryptionResponse = encryptValue(key, toJson(response.getData().getFirst()));
            return EncryptedResponse.builder().encryptedResponse(encryptionResponse).build();
        } else if (TransactionConstant.RESPONSE_FAILURE == response.getStatus() && CollectionUtils.isNotEmpty(response.getErrors())) {
            throw new TransactionException(response.getErrors());
        }
        throw new TransactionException(TransactionErrorConstants.PAYMENT_ERROR_CODE, MessageFormat.format(TransactionErrorConstants.PAYMENT_ERROR_MESSAGE, paymentType));
    }

}
