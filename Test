package com.epay.transaction.dao;

import com.epay.transaction.exceptions.TransactionException;
import com.epay.transaction.externalservice.EISServicesClient;
import com.epay.transaction.model.request.EISCardNumberRequest;
import com.epay.transaction.model.response.EncryptedResponse;
import com.epay.transaction.model.response.TransactionResponse;
import com.epay.transaction.util.TransactionConstant;
import com.epay.transaction.util.TransactionErrorConstants;
import com.sbi.epay.authentication.providers.EPayTokenProvider;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Component;

import java.text.MessageFormat;

import static com.epay.transaction.util.EncryptionDecryptionUtil.encryptValue;
import static com.epay.transaction.util.TransactionUtil.toJson;

@Component
@RequiredArgsConstructor
public class EISDao {

    private final EISServicesClient eisServicesClient;
    private final TokenDao tokenDao;
    private final EPayTokenProvider ePayTokenProvider;

    public String getEncryptionAESKey() {
        return tokenDao.getEncryptionAESKey(ePayTokenProvider.getToken());
    }

    public EncryptedResponse getECOMFlag(EISCardNumberRequest eisCardNumberRequest, String key) {
        TransactionResponse<String> response = eisServicesClient.getECOMFlag(eisCardNumberRequest.getCardNumber());
        return handleResponse(response, eisCardNumberRequest.getCardNumber(), key);
    }

    public EncryptedResponse getGstInDetails(EISCardNumberRequest eisCardNumberRequest, String key) {
        TransactionResponse<String> response = eisServicesClient.getGstInDetails(eisCardNumberRequest.getCardNumber());
        return handleResponse(response, eisCardNumberRequest.getCardNumber(), key);
    }

    private <T> EncryptedResponse handleResponse(TransactionResponse<T> response, String cardNumber, String key) {
        if (response.getStatus() == TransactionConstant.RESPONSE_SUCCESS && CollectionUtils.isNotEmpty(response.getData())) {
            String encryptionResponse = encryptValue(key, toJson(response.getData().getFirst()));
            return EncryptedResponse.builder().encryptedResponse(encryptionResponse).build();
        } else if (response.getStatus() == TransactionConstant.RESPONSE_FAILURE && CollectionUtils.isNotEmpty(response.getErrors())) {
            throw new TransactionException(response.getErrors());
        }
        throw new TransactionException(TransactionErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(TransactionErrorConstants.NOT_FOUND_ERROR_MESSAGE, cardNumber));
    }

}
