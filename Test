import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.UUID;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class AdminDaoTest {

    @Mock
    private MerchantRepository merchantRepository;

    @Mock
    private MerchantUserDao merchantUserDao;

    @Mock
    private MerchantEntityGroupRepository merchantEntityGroupRepository;

    @Mock
    private MerchantMapper mapper;

    @Mock
    private FooterRepository footerRepository;

    @Mock
    private AdminServicesClient adminServicesClient;

    @Mock
    private MerchantEntityUserRepository merchantEntityUserRepository;

    @InjectMocks
    private AdminDao adminDao;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testIsMerchantUserExistByUserId_ReturnsTrue() {
        // Arrange
        UUID userId = UUID.randomUUID();
        when(merchantUserDao.isMerchantUserExistByUserId(userId)).thenReturn(true);

        // Act
        boolean result = adminDao.isMerchantUserExistByUserId(userId);

        // Assert
        assertTrue(result);
        verify(merchantUserDao, times(1)).isMerchantUserExistByUserId(userId);
    }

    @Test
    void testIsMerchantUserExistByUserId_ReturnsFalse() {
        // Arrange
        UUID userId = UUID.randomUUID();
        when(merchantUserDao.isMerchantUserExistByUserId(userId)).thenReturn(false);

        // Act
        boolean result = adminDao.isMerchantUserExistByUserId(userId);

        // Assert
        assertFalse(result);
        verify(merchantUserDao, times(1)).isMerchantUserExistByUserId(userId);
    }
}
