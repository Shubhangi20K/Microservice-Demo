@Repository
@RequiredArgsConstructor
public class PasswordManagementDao {
    private final MerchantUserDao merchantUserDao;
    private final LoginDao loginDao;
    private final PasswordManagementRepository passwordManagementRepository;
    private final NotificationDao notificationDao;

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
    private final MerchantUserRepository merchantUserRepository;

    /**
     * Constructs a NotificationManagement entity for logging notification activities.
     *
     * @param requestType RequestType The type of the notification request.
     * @param entityId    UUID The entity ID associated with the notification.
     * @return NotificationManagement The constructed notification management entity.
     */
    private static NotificationManagement buildNotificationManagement(RequestType requestType, UUID entityId) {
        return NotificationManagement.builder().requestType(requestType.getName()).entityId(entityId).entityName(NotificationEntityType.PASSWORD_MANAGEMENT).build();
    }

    /**
     * Retrieves the merchant user data based on the provided username, email or mobile number
     *
     * @param userName   String
     * @param userStatus UserStatus
     * @return MerchantUserDto
     */
    public MerchantUserDto findByUserNameOrEmailOrMobilePhoneAndStatus(String userName, List<UserStatus> userStatus) {
        return merchantUserDao.getByUserNameOrEmailOrMobilePhoneAndStatus(userName, userName, userName, userStatus);
    }

    /**
     * Retrieves the list of userid last updated records
     *
     * @param userId UUID
     * @return List<PwdManagement>
     */
    public List<PasswordManagement> findLastPasswordsByUserId(UUID userId) {
        return passwordManagementRepository.findByUserIdOrderByCreatedAtDesc(userId, PageRequest.of(0, 5));
    }

    /**
     * This method will update pwd details for given user in DB
     *
     * @param userName    String
     * @param newPwd String
     * @param userStatus  UserStatus
     * @param requestType RequestType
     */
    @Transactional
    public void updatePasswordDetails(String userName, String newPwd, List<UserStatus> userStatus, RequestType requestType) {
        // Step 1 : Prepare the PWD Hash value
        String passwordHash = hashValue(newPwd);

        // Step 2 : Update the Merchant User with PWD Information
        MerchantUserDto merchantUser = merchantUserDao.updateMerchantUserForPassword(userName, passwordHash, userStatus);

        // Step 3 : Update previous PWD status in PWD Management
        updatePreviousPasswordStatus(merchantUser.getId());

        // Step 4 : Save new PWD information in PWD Management
        PasswordManagementType passwordManagementType = RequestType.CHANGE_PASSWORD.equals(requestType) ? PasswordManagementType.CHANGE_PASSWORD : PasswordManagementType.RESET_PASSWORD;
        PasswordManagement passwordManagement = saveUpdatesPasswordDetails(merchantUser.getId(), passwordHash, passwordManagementType);

        // Step 5 : Send Notification to user for PWD Update
        sendNotification(requestType, passwordManagement.getId(), merchantUser, newPwd);

        // Step 6 : Save Audit Operation
        saveAudit(userName, requestType, true, MessageFormat.format(SUCCESS_MESSAGE, PSW_UPDATED));
    }
