import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import javax.validation.ValidationException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class AdminDaoTest {

    @Mock
    private MerchantRepository merchantRepository;

    @Mock
    private MerchantUserDao merchantUserDao;

    @Mock
    private MerchantEntityGroupRepository merchantEntityGroupRepository;

    @Mock
    private MerchantMapper mapper;

    @Mock
    private FooterRepository footerRepository;

    @Mock
    private AdminServicesClient adminServicesClient;

    @Mock
    private MerchantEntityUserRepository merchantEntityUserRepository;

    @InjectMocks
    private AdminDao adminDao;

    @Test
    void testGetBankDetails_handlesValidationException() {
        String bankId = "BANK123";

        when(adminServicesClient.getBankDetails(bankId))
                .thenThrow(new ValidationException("Invalid bank ID"));

        BankDetailsResponse result = adminDao.getBankDetails(bankId);

        assertNull(result); // or check fallback behavior if implemented
        verify(adminServicesClient).getBankDetails(bankId);
    }
}
