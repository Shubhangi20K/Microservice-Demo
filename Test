
package com.epay.transaction.externalservice;

import com.epay.transaction.client.ApiClient;
import com.epay.transaction.externalservice.request.admin.BinCheckRequest;
import com.epay.transaction.externalservice.request.admin.CurrencyRequest;
import com.epay.transaction.externalservice.request.admin.GatewayConfigDetailsRequest;
import com.epay.transaction.externalservice.request.admin.MerchantPricingRequest;
import com.epay.transaction.externalservice.response.admin.*;
import com.epay.transaction.model.response.TransactionResponse;
import com.fasterxml.jackson.databind.JsonNode;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import org.springframework.core.ParameterizedTypeReference;

import java.util.List;
import java.util.Map;

/**
 * This class acts as a client to interact with the Admin Services API.
 * It provides various methods to fetch merchant-related details such as
 * multi-account details, pricing structure, bin check status, and more.
 */
public class AdminServicesClient extends ApiClient {

    // API endpoints
    public static final String GET_MULTI_ACCOUNT = "/merchant/multiaccountdetails/";
    private static final String MERCHANT = "/merchant/";
    private static final String MERCHANT_CONFIG_DETAILS_ENDPOINT = "/merchant/gatewayconfigdetails";
    private static final String PRICING_API_ENDPOINT = "/merchant/pricing";
    private static final String VVL_API_ENDPOINT = "/merchant/getmerchantvvldetails/";
    private static final String BIN_CHECK_ENDPOINT = "/merchant/cards/binCheck";
    private static final String MERCHANT_PAYMODE_ENDPOINT = "/merchant/paymode/";
    private static final String GET_RFC_DETAILS = "/merchant/getMerchantRfcDetails/";
    private static final String CURRENCY_CHK_ENDPOINT = "/merchant/validatecurrency";

    private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());

    /**
     * Constructor to initialize AdminServicesClient with the base URL.
     *
     * @param baseUrl API base URL
     */
    public AdminServicesClient(String baseUrl) {
        super(baseUrl);
    }

    /**
     * Fetches merchant information by merchant ID.
     *
     * @param mId Merchant ID
     * @return Transaction response containing merchant information
     */
    public TransactionResponse<MerchantInfoResponse> getMerchantInfoByMId(String mId) {
        logger.info("Fetching merchant info for mId: {}", mId);
        return post(MERCHANT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * Retrieves RFC (Request For Comments) details for a given merchant.
     *
     * @param mId Merchant ID
     * @return Transaction response containing merchant RFC details
     */
    public TransactionResponse<MerchantRfcDetailsResponse> getMerchantRFCInfo(String mId) {
        logger.info("Fetching RFC details for mId: {}", mId);
        return post(GET_RFC_DETAILS + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * Retrieves multi-account details for a given merchant.
     *
     * @param mId Merchant ID
     * @return Transaction response containing multi-account details
     */
    public TransactionResponse<Map<String, List<String>>> getMultiAccountDetailsApi(String mId) {
        logger.info("Fetching multi-account details for mId: {}", mId);
        return post(GET_MULTI_ACCOUNT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * Retrieves gateway configuration details for a given merchant.
     *
     * @param mId      Merchant ID
     * @param gtqMapId Gateway Map ID
     * @return Transaction response containing gateway configuration details
     */
    public TransactionResponse<GatewayConfigDetailsResponse> getGatewayConfigDetails(String mId, String gtqMapId) {
        logger.info("Fetching gateway configuration details for mId: {} and gtqMapId: {}", mId, gtqMapId);
        GatewayConfigDetailsRequest gatewayConfigDetailsRequest = GatewayConfigDetailsRequest.builder()
                .aggGtwMapId(gtqMapId)
                .mId(mId)
                .build();
        return post(MERCHANT_CONFIG_DETAILS_ENDPOINT, gatewayConfigDetailsRequest, new ParameterizedTypeReference<>() {});
    }

    /**
     * Fetches bin-check status from admin service.
     *
     * @param request BinCheck request details
     * @return Transaction response containing bin-check details
     */
    public TransactionResponse<BinCheckResponse> binCheckRequest(BinCheckRequest request) {
        logger.info("Fetching binCheck status for card bin: {}", request);
        return post(BIN_CHECK_ENDPOINT, request, new ParameterizedTypeReference<>() {});
    }

    /**
     * Retrieves pay mode details for a given merchant.
     *
     * @param mId Merchant ID
     * @return Transaction response containing pay mode details
     */
    public TransactionResponse<JsonNode> getMerchantPayModeInfo(String mId) {
        logger.info("Fetching pay mode info for mId: {}", mId);
        return post(MERCHANT_PAYMODE_ENDPOINT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * Retrieves the merchant pricing structure from the admin service.
     *
     * @param merchantPricingRequest Pricing request details
     * @return Transaction response containing merchant pricing details
     */
    public TransactionResponse<MerchantPricingResponse> getMerchantPricingStructure(MerchantPricingRequest merchantPricingRequest) {
        logger.info("Fetching merchant pricing structure for request: {}", merchantPricingRequest);
        return post(PRICING_API_ENDPOINT, merchantPricingRequest, new ParameterizedTypeReference<>() {});
    }

    /**
     * Fetches Volume Velocity (VVL) details for a given merchant.
     *
     * @param mId Merchant ID
     * @return Transaction response containing merchant VVL details
     */
    public TransactionResponse<MerchantVolumeVelocityResponse> geVvlDetails(String mId) {
        logger.info("Fetching VVL details for mId: {}", mId);
        return post(VVL_API_ENDPOINT + mId, mId, new ParameterizedTypeReference<>() {});
    }

    /**
     * Validates currency details based on the provided request.
     *
     * @param currencyRequest Currency validation request
     * @return Transaction response containing currency validation details
     */
    public TransactionResponse<?> getCurrencyValidate(CurrencyRequest currencyRequest) {
        logger.info("Validating currency for request: {}", currencyRequest);
        return post(CURRENCY_CHK_ENDPOINT, currencyRequest, new ParameterizedTypeReference<>() {});
    }
}
