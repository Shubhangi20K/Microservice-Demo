    public MerchantOrderDto getValidOrderBySBIOrderRefNumber(String sbiOrderRefNumber) {
        MerchantOrder merchantOrder = merchantOrderRepository.findBySbiOrderRefNumber(sbiOrderRefNumber).orElseThrow(() ->
        {
          //  errorLogDao.saveErrorLog(ErrorLogDto.builder().mId(EPayIdentityUtil.getUserPrincipal().getMId()).entityType(EntityType.ORDER).failureReason(FailureReason.CUSTOMER).errorCode(ATTEMPT_EXPIRED_ERROR_CODE).errorMessage(ATTEMPT_EXPIRED_ERROR_MESSAGE + " or MerchantOrder is not valid.").build());

            errorLogDao.logCustomerError(
                  null,
                    EntityType.ORDER,
                    NOT_FOUND_ERROR_CODE,
                    MessageFormat.format(NOT_FOUND_ERROR_MESSAGE, MERCHANT_ORDER)
            );
            return new TransactionException(ATTEMPT_EXPIRED_ERROR_CODE, ATTEMPT_EXPIRED_ERROR_MESSAGE + " or MerchantOrder is not valid.");});

        logger.info("Get merchantOrder from DB by active merchantOrder reference number:{}", merchantOrder);
        return merchantOrderMapper.entityToDto(merchantOrder);
    }

 private Optional<EPayPrincipal> validateTransactionTokenRequest(String authKey) {
        EPayPrincipal authenticateEntity = new EPayPrincipal();
        MerchantOrderDto order = orderDao.getValidOrderBySBIOrderRefNumber(authKey.substring(0, authKey.indexOf(":")));
        authenticateEntity.setMId(order.getMId());
        authenticateEntity.setOrderRef(order.getOrderRefNumber());
        authenticateEntity.setAuthenticationId(authKey.substring(0, authKey.indexOf(":")));
        return Optional.of(authenticateEntity);
    }
   public MerchantOrderDto getMerchantOrder() {
        logger.info("Validating Order By SBI orderReferenceNo");
        return merchantOrderDao.getValidOrderBySBIOrderRefNumber(EPayIdentityUtil.getUserPrincipal().getOrderRef());
    }
