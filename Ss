
@ExtendWith(MockitoExtension.class)
class AdminDaoTest {

    @Mock
    private MerchantRepository merchantRepository;

    @Mock
    private MerchantUserDao merchantUserDao;

    @Mock
    private MerchantEntityGroupRepository merchantEntityGroupRepository;

    @Mock
    private MerchantMapper mapper;

    @Mock
    private FooterRepository footerRepository;

    @Mock
    private AdminServicesClient adminServicesClient;

    @Mock
    private MerchantEntityUserRepository merchantEntityUserRepository;

    @InjectMocks
    private AdminDao adminDao;

    @Test
    void testGetBankDetailsByIfscCode_success() {
        // Arrange
        String ifscCode = "HDFC0001234";
        BankDetailsResponse mockResponse = new BankDetailsResponse();
        List<BankDetailsResponse> responseList = Collections.singletonList(mockResponse);

        Mockito.when(adminServicesClient.getBankDetailsByIfscCode(ifscCode)).thenReturn(responseList);

        // Act
        BankDetailsResponse result = adminDao.getBankDetailsByIfscCode(ifscCode);

        // Assert
        Assertions.assertNotNull(result);
        Assertions.assertEquals(mockResponse, result);
        Mockito.verify(adminServicesClient).getBankDetailsByIfscCode(ifscCode);
    }

    @Test
    void testGetBankDetailsByIfscCode_emptyResponse() {
        // Arrange
        String ifscCode = "HDFC0000000";
        Mockito.when(adminServicesClient.getBankDetailsByIfscCode(ifscCode)).thenReturn(Collections.emptyList());

        // Act & Assert
        Assertions.assertThrows(IndexOutOfBoundsException.class, () -> {
            adminDao.getBankDetailsByIfscCode(ifscCode);
        });

        Mockito.verify(adminServicesClient).getBankDetailsByIfscCode(ifscCode);
    }

    @Test
    void testGetBankDetailsByIfscCode_exceptionHandling() {
        // Arrange
        String ifscCode = "HDFC0000000";
        Mockito.when(adminServicesClient.getBankDetailsByIfscCode(ifscCode))
               .thenThrow(new MerchantException("500", "External service error"));

        // Act & Assert
        Assertions.assertThrows(MerchantException.class, () -> {
            adminDao.getBankDetailsByIfscCode(ifscCode);
        });

        Mockito.verify(adminServicesClient).getBankDetailsByIfscCode(ifscCode);
    }
}
