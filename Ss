 @Test
    void testGetAllAlerts() {
        String mId = "someMerchantId";
        try (MockedStatic<EPayIdentityUtil> identityUtilMock = mockStatic(EPayIdentityUtil.class)) {
            identityUtilMock.when(EPayIdentityUtil::getUserPrincipal).thenReturn(mockPrincipal);
            when(mockPrincipal.getUserRole()).thenReturn(List.of("USER"));
            AlertManagement alertManagement= new AlertManagement();
            alertManagement.setAlertDescription("AlertDescription");
            Page<AlertManagement> alertManagementList=;
            List<UUID> excludedAlertIds=List.of(UUID.randomUUID());
            Page<AlertManagement> page = new PageImpl<>(Collections.emptyList());
            when(alertMapper.alertManagementEntityToResponse(anyList()))
                    .thenReturn(Collections.emptyList());
            when(alertManagementRepository.findUnreadAlertsByMId(eq(mId), any(Pageable.class))).thenReturn(page);
            when(alertManagementRepository.findAlerts(mId, excludedAlertIds, any(Pageable.class))).thenReturn();
            Page<AlertManagementResponse> result = alertDao.getAllAlerts(mId, PageRequest.of(1, 100));

        }
    }


@Repository
@RequiredArgsConstructor
public class AlertDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final AlertMasterRepository alertMasterRepository;
    private final AlertManagementRepository alertManagementRepository;
    private final MerchantInfoDao merchantInfoDao;
    private final AlertMapper alertMapper;

    public Page<AlertManagementResponse> getAllAlerts(String mId, Pageable pageable) {
        return getLatestAlertDescription(mId, true, pageable);
    }

@Repository
@RequiredArgsConstructor
public class AlertDao {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final AlertMasterRepository alertMasterRepository;
    private final AlertManagementRepository alertManagementRepository;
    private final MerchantInfoDao merchantInfoDao;
    private final AlertMapper alertMapper;
private Page<AlertManagementResponse> getLatestAlertDescription(String mId, boolean getAll, Pageable pageable) {
        // Get user roles
        List<String> userRoles = EPayIdentityUtil.getUserPrincipal().getUserRole();
        boolean isUser = checkIsUserRole(userRoles);
        Page<AlertManagement> alertManagementList;
        if (isUser) {
            List<AlertMasterDto> accountExpiryAlerts = findAllAlertByName(ACCOUNT_EXPIRY);
            List<UUID> excludedAlertIds = getAlertMasterId(accountExpiryAlerts);
            alertManagementList = getAll
                    ? alertManagementRepository.findAlerts(mId, excludedAlertIds, pageable)
                    : alertManagementRepository.findUnreadAlerts(mId, excludedAlertIds, pageable);
        } else {
            alertManagementList = getAll
                    ? alertManagementRepository.findByMId(mId, pageable)
                    : alertManagementRepository.findUnreadAlertsByMId(mId, pageable);
        }
        List<AlertManagementResponse> responses = alertMapper.alertManagementEntityToResponse(alertManagementList.getContent());
        return new PageImpl<>(responses, pageable, alertManagementList.getTotalElements());
    }
