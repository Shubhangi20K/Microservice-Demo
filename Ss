import com.example.dao.AdminDao;
import com.example.dto.MerchantBankAccountApprovalRequest;
import com.example.dto.MerchantResponse;
import com.example.service.*;
import com.example.utility.LoggerFactoryUtility;
import com.example.validator.AdminValidator;
import com.example.validator.MerchantUserValidator;
import com.example.validator.OnboardingValidator;
import lombok.RequiredArgsConstructor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@RequiredArgsConstructor
class AdminServiceTest {

    @Mock
    private OnboardingValidator onboardingValidator;
    @Mock
    private AdminValidator adminValidator;
    @Mock
    private AdminDao adminDao;
    @Mock
    private MerchantEntityGroupMapper merchantEntityGroupMapper;
    @Mock
    private MerchantMapper merchantMapper;
    @Mock
    private HelpSupportService helpSupportService;
    @Mock
    private MerchantBankService merchantBankService;
    @Mock
    private MerchantUserValidator mIdValidator;

    @InjectMocks
    private AdminService adminService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testApprovedBankAccount_Success() {
        // Arrange
        MerchantBankAccountApprovalRequest request = new MerchantBankAccountApprovalRequest();
        request.setMId("MID123");
        request.setAccountUniqueIdentifier("ACC123456");
        request.setApproved(true);
        request.setRemarks("Approved");
        request.setOperationType("UPDATE");

        MerchantResponse<String> expectedResponse = MerchantResponse.<String>builder()
                .status("SUCCESS")
                .data(List.of("Bank account updated"))
                .total(1L)
                .build();

        doNothing().when(adminValidator).validateApprovalRequest(request);
        when(merchantBankService.approvedBankAccount(request)).thenReturn(expectedResponse);

        // Act
        MerchantResponse<String> actualResponse = adminService.approvedBankAccount(request);

        // Assert
        verify(adminValidator, times(1)).validateApprovalRequest(request);
        verify(merchantBankService, times(1)).approvedBankAccount(request);
        assertEquals(expectedResponse, actualResponse);
    }
}
