
@Component
@RequiredArgsConstructor
public class AdminDao {

    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());

    private final MerchantRepository merchantRepository;
    private final MerchantUserDao merchantUserDao;
    private final MerchantEntityGroupRepository merchantEntityGroupRepository;
    private final MerchantMapper mapper;
    private final FooterRepository footerRepository;
    private final AdminServicesClient adminServicesClient;
    private final MerchantEntityUserRepository merchantEntityUserRepository;

    public BankDetailsResponse getBankDetailsByIfscCode(String ifsc) {
        log.info("Fetching bank details from external service for IFSC Code: {}", ifsc);
        return adminServicesClient.getBankDetailsByIfscCode(ifsc).getFirst();
    }



public class AdminServicesClient extends ApiClient {

    public static final String DOWNTIME_API_ENDPOINT = "/payMode/downtime";
    public static final String MERCHANT_PAYMODE_API = "/merchant/payMode/";
    public static final String BANK_ACCOUNT_VALIDATION = "/bank/validate";
    public static final String BANK_ENDPOINT = "/bank";
    public static final String BRANCH_DETAILS_ENDPOINT = "/bank/branch/";

    public static final String DATA = "data";
    public static final String PAY_MODES = "payModes";
    public static final String PREFERRED_OPTIONS = "preferredOptions";
    public static final String PAYMENT_OPTIONS = "otherPaymentOptions";
    public static final String INB = "INB";
    public static final String UPI = "UPI";
    public static final String UPI_KEY_BHIMQR = "BHIMQR";
    public static final String UPI_KEY_SELF = "self";
    public List<BankDetailsResponse> getBankDetailsByIfscCode( String ifscCode) {
        return getList(BANK_ENDPOINT + "/" + ifscCode, new ParameterizedTypeReference<>() {});
    }



@Getter
@RequiredArgsConstructor
public class ApiClient {
  public static final String LOG_EXCEPTION = "Got exception {}";
  private final LoggerUtility logger = LoggerFactoryUtility.getLogger(this.getClass());
  private final String baseUrl;
  private final WebClient webClient;
  protected <T> List<T> getList(String urlPath, ParameterizedTypeReference<MerchantResponse<T>> typeReference) {
    try {
      URI uri = URI.create(getBaseUrl() + urlPath);
      logger.info("Get call URI: {}", uri);
      MerchantResponse<T> merchantResponse =
          getWebClient()
              .get()
              .uri(uri)
              .headers(httpHeaders -> httpHeaders.addAll(prepareHttpHeaders()))
              .exchangeToMono(response -> response.bodyToMono(typeReference))
              .block();
      validateResponse(merchantResponse);
      return buildResponseList(merchantResponse);
    } catch (NestedRuntimeException e) {
      logger.error(LOG_EXCEPTION, e.getMessage());
      throw new MerchantException(EXTERNAL_SERVICE_ERROR_CODE, MessageFormat.format(EXTERNAL_SERVICE_ERROR_MESSAGE, getServiceName()));
    }
  }
