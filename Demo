
package com.epay.transaction.externalservice;

import com.epay.transaction.config.S3Config;
import com.epay.transaction.exceptions.TransactionException;
import com.epay.transaction.util.TransactionErrorConstants;
import com.sbi.epay.logging.utility.LoggerFactoryUtility;
import com.sbi.epay.logging.utility.LoggerUtility;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.core.ResponseBytes;
import software.amazon.awssdk.core.ResponseInputStream;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

import java.io.File;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * Service class for interacting with AWS S3 for file storage operations.
 * <p>
 * This class provides methods for:
 * <ul>
 *   <li>Uploading files to S3 (from File, byte array, or MultipartFile)</li>
 *   <li>Downloading files from S3</li>
 *   <li>Listing stored files</li>
 *   <li>Reading file content</li>
 * </ul>
 * <p>
 * Proper exception handling and logging are implemented for error tracking.
 * </p>
 * 
 * <p><strong>Author:</strong> Bhoopendra Rajput</p>
 * <p><strong>Version:</strong> 1.0</p>
 * <p><strong>Copyright:</strong> Â© 2024 State Bank of India. All rights reserved.</p>
 */
@RequiredArgsConstructor
@Service
public class S3Service {
    private final LoggerUtility log = LoggerFactoryUtility.getLogger(this.getClass());
    private final S3Config s3Config;
    private final S3Client s3Client;

    /**
     * Uploads a file to S3 using a File object.
     *
     * @param file the file to be uploaded
     * @return the S3 key for the uploaded file
     */
    public String uploadFile(File file) {
        String key = System.currentTimeMillis() + "-" + file.getName();
        try {
            log.info("Uploading file to S3: {}", key);
            PutObjectRequest objectRequest = PutObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(file.getName())
                    .build();
            s3Client.putObject(objectRequest, RequestBody.fromFile(file));
            log.info("File uploaded successfully: {}", key);
            return key;
        } catch (S3Exception e) {
            log.error("S3 upload failed for file: {} with error: {}", key, e.getMessage());
            throw new TransactionException(TransactionErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     * Uploads a file to S3 using byte array content.
     *
     * @param fileName    the name of the file
     * @param fileContent the file content as a byte array
     * @return the S3 key for the uploaded file
     */
    public String uploadFile(String fileName, byte[] fileContent) {
        String key = System.currentTimeMillis() + "-" + fileName;
        try {
            log.info("Uploading byte array file to S3: {}", key);
            PutObjectRequest objectRequest = PutObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(key)
                    .build();
            s3Client.putObject(objectRequest, RequestBody.fromBytes(fileContent));
            log.info("File uploaded successfully: {}", key);
            return key;
        } catch (S3Exception e) {
            log.error("S3 upload failed for file: {} with error: {}", key, e.getMessage());
            throw new TransactionException(TransactionErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     * Uploads a file to S3 using a MultipartFile.
     *
     * @param file the MultipartFile to upload
     * @return the S3 key for the uploaded file
     */
    public String uploadFile(MultipartFile file) {
        String key = System.currentTimeMillis() + "-" + file.getOriginalFilename();
        try {
            log.info("Uploading MultipartFile to S3: {}", key);
            PutObjectRequest objectRequest = PutObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(key)
                    .contentType(file.getContentType())
                    .contentLength(file.getSize())
                    .build();
            PutObjectResponse putObjectResponse = s3Client.putObject(objectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));
            log.info("File uploaded successfully: {}", key);
            return key;
        } catch (S3Exception | IOException e) {
            log.error("S3 upload failed for file: {} with error: {}", key, e.getMessage());
            throw new TransactionException(TransactionErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }

    /**
     * Downloads a file from S3 and writes it to the provided HttpServletResponse.
     *
     * @param response the HTTP response object where the file will be written
     * @param fileName the name of the file to be downloaded
     */
    public void downloadFile(HttpServletResponse response, String fileName) {
        try {
            log.info("Downloading file from S3: {}", fileName);
            GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(fileName)
                    .build();
            ResponseInputStream<GetObjectResponse> object = s3Client.getObject(getObjectRequest);
            object.transferTo(response.getOutputStream());
            response.getOutputStream().close();
            log.info("File downloaded successfully: {}", fileName);
        } catch (S3Exception | IOException e) {
            log.error("S3 download failed for file: {} with error: {}", fileName, e.getMessage());
            throw new TransactionException(TransactionErrorConstants.NOT_FOUND_ERROR_CODE, MessageFormat.format(TransactionErrorConstants.NOT_FOUND_ERROR_MESSAGE, fileName));
        }
    }

    /**
     * Lists all files stored in the S3 bucket.
     *
     * @return a list of file keys present in the bucket
     */
    public List<String> listObjects() {
        List<String> fileList = new ArrayList<>();
        try {
            log.info("Fetching list of files from S3 bucket...");
            ListObjectsV2Request listObjectsV2Request = ListObjectsV2Request.builder()
                    .bucket(s3Config.getBucket())
                    .build();
            ListObjectsV2Response listObjectsV2Response = s3Client.listObjectsV2(listObjectsV2Request);
            listObjectsV2Response.contents().forEach(s3Object -> {
                log.info("Found file: {}", s3Object.key());
                fileList.add(s3Object.key());
            });
        } catch (S3Exception e) {
            log.error("Failed to list objects in S3 bucket: {}", e.getMessage());
            throw new TransactionException(TransactionErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
        return fileList;
    }

    /**
     * Reads file content from S3 and returns it as a ResponseBytes object.
     *
     * @param key the S3 file key
     * @return file content as ResponseBytes
     */
    public ResponseBytes<GetObjectResponse> readFile(String key) {
        try {
            log.info("Reading file from S3: {}", key);
            GetObjectRequest getObjectRequest = GetObjectRequest.builder()
                    .bucket(s3Config.getBucket())
                    .key(key)
                    .build();
            ResponseBytes<GetObjectResponse> fileContent = s3Client.getObjectAsBytes(getObjectRequest);
            log.info("File read successfully: {}", key);
            return fileContent;
        } catch (S3Exception e) {
            log.error("Failed to read file from S3: {} with error: {}", key, e.getMessage());
            throw new TransactionException(TransactionErrorConstants.GENERIC_ERROR_CODE, e.getMessage());
        }
    }
}
